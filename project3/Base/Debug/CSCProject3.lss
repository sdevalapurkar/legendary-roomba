
CSCProject3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000634  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800204  00800204  000006cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d0  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001275  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001030  00000000  00000000  00004449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  0000547c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea1  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f76  00000000  00000000  00006781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000076f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	61 c2       	rjmp	.+1218   	; 0x528 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5e c2       	rjmp	.+1212   	; 0x58a <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3f       	cpi	r26, 0xFE	; 254
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	fa d0       	rcall	.+500    	; 0x314 <main>
 120:	87 c2       	rjmp	.+1294   	; 0x630 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_LED_C6>:
 * \date October 2006
 */

void init_LED_C6(void)
{
	DDRC |= LED_C6;		//Set LED to output (pins 4 and 5)
 124:	3e 9a       	sbi	0x07, 6	; 7
	PORTC = 0x00;		//Initialize port to LOW (turn off LEDs)
 126:	18 b8       	out	0x08, r1	; 8
 128:	08 95       	ret

0000012a <readADC>:
void pulse_pin1_task(bool is_ready_state) {
	// Scheduler_AddSporadicTask(200, pulse_pin3_task, true, 50);

	if (is_ready_state) {
		
		Roomba_Drive(100, 0);
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	28 2f       	mov	r18, r24
 134:	27 70       	andi	r18, 0x07	; 7
 136:	92 2b       	or	r25, r18
 138:	90 83       	st	Z, r25
 13a:	eb e7       	ldi	r30, 0x7B	; 123
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	97 7f       	andi	r25, 0xF7	; 247
 142:	88 70       	andi	r24, 0x08	; 8
 144:	89 2b       	or	r24, r25
 146:	80 83       	st	Z, r24
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
 152:	80 81       	ld	r24, Z
 154:	86 fd       	sbrc	r24, 6
 156:	fd cf       	rjmp	.-6      	; 0x152 <readADC+0x28>
 158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret

00000160 <getJoyCenter>:
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ce e1       	ldi	r28, 0x1E	; 30
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 17c:	d6 df       	rcall	.-84     	; 0x12a <readADC>
 17e:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <leftXAxisCenter>
 182:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <leftXAxisCenter+0x1>
 186:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <leftXAxisCenter+0x2>
 18a:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <leftXAxisCenter+0x3>
 18e:	48 0f       	add	r20, r24
 190:	59 1f       	adc	r21, r25
 192:	61 1d       	adc	r22, r1
 194:	71 1d       	adc	r23, r1
 196:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <leftXAxisCenter>
 19a:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <leftXAxisCenter+0x1>
 19e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <leftXAxisCenter+0x2>
 1a2:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <leftXAxisCenter+0x3>
 1a6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <leftJoyYPin>
 1aa:	bf df       	rcall	.-130    	; 0x12a <readADC>
 1ac:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <leftYAxisCenter>
 1b0:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <leftYAxisCenter+0x1>
 1b4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <leftYAxisCenter+0x2>
 1b8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <leftYAxisCenter+0x3>
 1bc:	48 0f       	add	r20, r24
 1be:	59 1f       	adc	r21, r25
 1c0:	61 1d       	adc	r22, r1
 1c2:	71 1d       	adc	r23, r1
 1c4:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <leftYAxisCenter>
 1c8:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <leftYAxisCenter+0x1>
 1cc:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <leftYAxisCenter+0x2>
 1d0:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <leftYAxisCenter+0x3>
 1d4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rightJoyXPin>
 1d8:	a8 df       	rcall	.-176    	; 0x12a <readADC>
 1da:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <rightXAxisCenter>
 1de:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <rightXAxisCenter+0x1>
 1e2:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <rightXAxisCenter+0x2>
 1e6:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <rightXAxisCenter+0x3>
 1ea:	48 0f       	add	r20, r24
 1ec:	59 1f       	adc	r21, r25
 1ee:	61 1d       	adc	r22, r1
 1f0:	71 1d       	adc	r23, r1
 1f2:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <rightXAxisCenter>
 1f6:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <rightXAxisCenter+0x1>
 1fa:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <rightXAxisCenter+0x2>
 1fe:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <rightXAxisCenter+0x3>
 202:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rightJoyYPin>
 206:	91 df       	rcall	.-222    	; 0x12a <readADC>
 208:	c0 90 0e 02 	lds	r12, 0x020E	; 0x80020e <rightYAxisCenter>
 20c:	d0 90 0f 02 	lds	r13, 0x020F	; 0x80020f <rightYAxisCenter+0x1>
 210:	e0 90 10 02 	lds	r14, 0x0210	; 0x800210 <rightYAxisCenter+0x2>
 214:	f0 90 11 02 	lds	r15, 0x0211	; 0x800211 <rightYAxisCenter+0x3>
 218:	c8 0e       	add	r12, r24
 21a:	d9 1e       	adc	r13, r25
 21c:	e1 1c       	adc	r14, r1
 21e:	f1 1c       	adc	r15, r1
 220:	c0 92 0e 02 	sts	0x020E, r12	; 0x80020e <rightYAxisCenter>
 224:	d0 92 0f 02 	sts	0x020F, r13	; 0x80020f <rightYAxisCenter+0x1>
 228:	e0 92 10 02 	sts	0x0210, r14	; 0x800210 <rightYAxisCenter+0x2>
 22c:	f0 92 11 02 	sts	0x0211, r15	; 0x800211 <rightYAxisCenter+0x3>
 230:	21 97       	sbiw	r28, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <getJoyCenter+0xd6>
 234:	a1 cf       	rjmp	.-190    	; 0x178 <getJoyCenter+0x18>
 236:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <leftXAxisCenter>
 23a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <leftXAxisCenter+0x1>
 23e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <leftXAxisCenter+0x2>
 242:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <leftXAxisCenter+0x3>
 246:	0f 2e       	mov	r0, r31
 248:	fe e1       	ldi	r31, 0x1E	; 30
 24a:	8f 2e       	mov	r8, r31
 24c:	91 2c       	mov	r9, r1
 24e:	a1 2c       	mov	r10, r1
 250:	b1 2c       	mov	r11, r1
 252:	f0 2d       	mov	r31, r0
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	c9 d1       	rcall	.+914    	; 0x5ec <__udivmodsi4>
 25a:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <leftXAxisCenter>
 25e:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <leftXAxisCenter+0x1>
 262:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <leftXAxisCenter+0x2>
 266:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <leftXAxisCenter+0x3>
 26a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <leftYAxisCenter>
 26e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <leftYAxisCenter+0x1>
 272:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <leftYAxisCenter+0x2>
 276:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <leftYAxisCenter+0x3>
 27a:	a5 01       	movw	r20, r10
 27c:	94 01       	movw	r18, r8
 27e:	b6 d1       	rcall	.+876    	; 0x5ec <__udivmodsi4>
 280:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <leftYAxisCenter>
 284:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <leftYAxisCenter+0x1>
 288:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <leftYAxisCenter+0x2>
 28c:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <leftYAxisCenter+0x3>
 290:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <rightXAxisCenter>
 294:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <rightXAxisCenter+0x1>
 298:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <rightXAxisCenter+0x2>
 29c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <rightXAxisCenter+0x3>
 2a0:	a5 01       	movw	r20, r10
 2a2:	94 01       	movw	r18, r8
 2a4:	a3 d1       	rcall	.+838    	; 0x5ec <__udivmodsi4>
 2a6:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <rightXAxisCenter>
 2aa:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <rightXAxisCenter+0x1>
 2ae:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <rightXAxisCenter+0x2>
 2b2:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <rightXAxisCenter+0x3>
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	a5 01       	movw	r20, r10
 2bc:	94 01       	movw	r18, r8
 2be:	96 d1       	rcall	.+812    	; 0x5ec <__udivmodsi4>
 2c0:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <rightYAxisCenter>
 2c4:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <rightYAxisCenter+0x1>
 2c8:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <rightYAxisCenter+0x2>
 2cc:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <rightYAxisCenter+0x3>
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <initADC>:
		//PORTC |= (1 << PC0);
	}
}

void initADC() {
	DDRC = (DDRC & 0xF0);
 2e6:	87 b1       	in	r24, 0x07	; 7
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	87 60       	ori	r24, 0x07	; 7
 2f4:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 2f6:	ac e7       	ldi	r26, 0x7C	; 124
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	8c 91       	ld	r24, X
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 300:	8c 91       	ld	r24, X
 302:	80 62       	ori	r24, 0x20	; 32
 304:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);  // Enable ADC
 306:	80 81       	ld	r24, Z
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Start a conversion to warmup the ADC.
 30c:	80 81       	ld	r24, Z
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <main>:
}


int main(void) {
	DDRG |= 0x20; // PWM-4
 314:	9d 9a       	sbi	0x13, 5	; 19
	DDRH |= 0x20; // PWM-8
 316:	e1 e0       	ldi	r30, 0x01	; 1
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	80 81       	ld	r24, Z
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	80 83       	st	Z, r24
	DDRB |= 0x20; // PWM-11
 320:	25 9a       	sbi	0x04, 5	; 4

	init_timer();
 322:	82 d0       	rcall	.+260    	; 0x428 <init_timer>
	init_LED_C6();
 324:	ff de       	rcall	.-514    	; 0x124 <init_LED_C6>
	initADC();
 326:	df df       	rcall	.-66     	; 0x2e6 <initADC>
	getJoyCenter(); // init Joystick Center values
 328:	1b df       	rcall	.-458    	; 0x160 <getJoyCenter>
 32a:	17 d0       	rcall	.+46     	; 0x35a <Roomba_Init>

	// uart_init(UART_19200);
	// Scheduler_Init();
	Roomba_Init();
 32c:	60 e0       	ldi	r22, 0x00	; 0
	Roomba_Drive(100, 0);
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	5d d0       	rcall	.+186    	; 0x3f0 <Roomba_Drive>
 336:	81 e0       	ldi	r24, 0x01	; 1
	// Channel 2 - Bluetooth to Arduino Communication
	// Scheduler_StartPeriodicTask(0, 10, pulse_pin1_task, true);
	//
	while (uart_bytes_received(CH_2) != 1);
 338:	df d0       	rcall	.+446    	; 0x4f8 <uart_bytes_received>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x22>
 33e:	61 e0       	ldi	r22, 0x01	; 1
	
	valueMoney = uart_get_byte(0, CH_2);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	be d0       	rcall	.+380    	; 0x4c2 <uart_get_byte>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 34c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
 350:	81 e0       	ldi	r24, 0x01	; 1
	uart_reset_receive(CH_2);
 352:	df d0       	rcall	.+446    	; 0x512 <uart_reset_receive>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
//
	//// Scheduler_StartPeriodicTask(0, 10, pulse_pin1_task, true);
	//// Scheduler_AddSporadicTask(100, pulse_pin1_task, true, 5);
//
	//Scheduler_Start();
}
 358:	08 95       	ret

0000035a <Roomba_Init>:
 35a:	3d 9a       	sbi	0x07, 5	; 7
 35c:	45 98       	cbi	0x08, 5	; 8
		return;
	}

	state = newState;
	_delay_ms(20);
}
 35e:	2f e9       	ldi	r18, 0x9F	; 159
 360:	86 e8       	ldi	r24, 0x86	; 134
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <Roomba_Init+0xa>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Roomba_Init+0x14>
 36e:	00 00       	nop
 370:	45 9a       	sbi	0x08, 5	; 8
 372:	ef e7       	ldi	r30, 0x7F	; 127
 374:	fa e1       	ldi	r31, 0x1A	; 26
 376:	26 e0       	ldi	r18, 0x06	; 6
 378:	e1 50       	subi	r30, 0x01	; 1
 37a:	f0 40       	sbci	r31, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <Roomba_Init+0x1e>
 380:	00 c0       	rjmp	.+0      	; 0x382 <Roomba_Init+0x28>
 382:	00 00       	nop
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	45 98       	cbi	0x08, 5	; 8
 388:	e3 ed       	ldi	r30, 0xD3	; 211
 38a:	f0 e3       	ldi	r31, 0x30	; 48
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <Roomba_Init+0x32>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Roomba_Init+0x38>
 392:	00 00       	nop
 394:	45 9a       	sbi	0x08, 5	; 8
 396:	e3 ed       	ldi	r30, 0xD3	; 211
 398:	f0 e3       	ldi	r31, 0x30	; 48
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <Roomba_Init+0x40>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Roomba_Init+0x46>
 3a0:	00 00       	nop
 3a2:	81 50       	subi	r24, 0x01	; 1
 3a4:	81 f7       	brne	.-32     	; 0x386 <Roomba_Init+0x2c>
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	48 d0       	rcall	.+144    	; 0x43c <uart_init>
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	73 d0       	rcall	.+230    	; 0x498 <uart_putchar>
 3b2:	87 e8       	ldi	r24, 0x87	; 135
 3b4:	93 e1       	ldi	r25, 0x13	; 19
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <Roomba_Init+0x5c>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <Roomba_Init+0x62>
 3bc:	00 00       	nop
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e8       	ldi	r24, 0x81	; 129
 3c2:	6a d0       	rcall	.+212    	; 0x498 <uart_putchar>
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	89 e0       	ldi	r24, 0x09	; 9
 3c8:	67 d0       	rcall	.+206    	; 0x498 <uart_putchar>
 3ca:	e7 ea       	ldi	r30, 0xA7	; 167
 3cc:	f1 e6       	ldi	r31, 0x61	; 97
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <Roomba_Init+0x74>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <Roomba_Init+0x7a>
 3d4:	00 00       	nop
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	30 d0       	rcall	.+96     	; 0x43c <uart_init>
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	82 e8       	ldi	r24, 0x82	; 130
 3e0:	5b d0       	rcall	.+182    	; 0x498 <uart_putchar>
 3e2:	87 e8       	ldi	r24, 0x87	; 135
 3e4:	93 e1       	ldi	r25, 0x13	; 19
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <Roomba_Init+0x8c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <Roomba_Init+0x92>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <Roomba_Drive>:

void Roomba_Drive(int16_t velocity, int16_t radius )
{
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	18 2f       	mov	r17, r24
 3fa:	09 2f       	mov	r16, r25
 3fc:	c6 2f       	mov	r28, r22
 3fe:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE, CH_1);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	89 e8       	ldi	r24, 0x89	; 137
 404:	49 d0       	rcall	.+146    	; 0x498 <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity), CH_1);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	80 2f       	mov	r24, r16
 40a:	46 d0       	rcall	.+140    	; 0x498 <uart_putchar>
	uart_putchar(LOW_BYTE(velocity), CH_1);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 2f       	mov	r24, r17
 410:	43 d0       	rcall	.+134    	; 0x498 <uart_putchar>
	uart_putchar(HIGH_BYTE(radius), CH_1);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	8d 2f       	mov	r24, r29
 416:	40 d0       	rcall	.+128    	; 0x498 <uart_putchar>
	uart_putchar(LOW_BYTE(radius), CH_1);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	8c 2f       	mov	r24, r28
 41c:	3d d0       	rcall	.+122    	; 0x498 <uart_putchar>
 41e:	df 91       	pop	r29
}
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	08 95       	ret

00000428 <init_timer>:


uint16_t current_time;

void init_timer() {
	TCCR0A = 0;
 428:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);
 42a:	85 b5       	in	r24, 0x25	; 37
 42c:	85 60       	ori	r24, 0x05	; 5
 42e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 430:	16 bc       	out	0x26, r1	; 38
	current_time = 0;
 432:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <current_time+0x1>
 436:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <current_time>
 43a:	08 95       	ret

0000043c <uart_init>:
 *
 */
void uart_init(UART_BPS bitrate, UART_CHANNEL cs)
{
	int rate;
	switch (bitrate)
 43c:	88 23       	and	r24, r24
 43e:	31 f0       	breq	.+12     	; 0x44c <uart_init+0x10>
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	11 f0       	breq	.+4      	; 0x448 <uart_init+0xc>
	{
		case UART_9600:
		rate = 207;
		break;
		case UART_19200:
		rate = 103;
 444:	87 e6       	ldi	r24, 0x67	; 103
 446:	03 c0       	rjmp	.+6      	; 0x44e <uart_init+0x12>
		break;
		case UART_38400:
		rate = 51;
 448:	83 e3       	ldi	r24, 0x33	; 51
		break;
 44a:	01 c0       	rjmp	.+2      	; 0x44e <uart_init+0x12>
{
	int rate;
	switch (bitrate)
	{
		case UART_9600:
		rate = 207;
 44c:	8f ec       	ldi	r24, 0xCF	; 207
		break;
		default:
		rate = 103;
		break;
	}
	switch(cs){
 44e:	66 23       	and	r22, r22
 450:	19 f0       	breq	.+6      	; 0x458 <uart_init+0x1c>
 452:	61 30       	cpi	r22, 0x01	; 1
 454:	89 f0       	breq	.+34     	; 0x478 <uart_init+0x3c>
 456:	08 95       	ret
		case CH_1:
			UBRR0H = 0;
 458:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
			UBRR0L = rate;
 45c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
		
			// Clear USART Transmit complete flag, normal USART transmission speed
			UCSR0A = _BV(U2X0);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

			// Enable receiver, transmitter, rx complete interrupt and tx complete interrupt.
			UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 466:	88 e9       	ldi	r24, 0x98	; 152
 468:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

			// 8-bit data
			UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
		
			uart_buffer_index_1 = 0;
 472:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <uart_buffer_index_1>
		break;
 476:	08 95       	ret
		case CH_2:
			uart_buffer_index_2 = 0;
 478:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <uart_buffer_index_2>
			UBRR2H = 0;
 47c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
			UBRR2L = rate;
 480:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
			// Clear USART Transmit complete flag, normal USART transmission speed
			UCSR2A = _BV(U2X2);
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

			// Enable receiver, transmitter, rx complete interrupt and tx complete interrupt.
			UCSR2B = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
 48a:	88 e9       	ldi	r24, 0x98	; 152
 48c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

			// 8-bit data
			UCSR2C = _BV(UCSZ21) | _BV(UCSZ20);
 490:	86 e0       	ldi	r24, 0x06	; 6
 492:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 496:	08 95       	ret

00000498 <uart_putchar>:
 *
 * @param byte data to trasmit
 */
void uart_putchar(uint8_t byte, UART_CHANNEL cs)
{
	switch(cs){
 498:	66 23       	and	r22, r22
 49a:	19 f0       	breq	.+6      	; 0x4a2 <uart_putchar+0xa>
 49c:	61 30       	cpi	r22, 0x01	; 1
 49e:	49 f0       	breq	.+18     	; 0x4b2 <uart_putchar+0x1a>
 4a0:	08 95       	ret
		case(CH_1):
			/* wait for empty transmit buffer */
			while (!( UCSR0A & (1 << UDRE0)));
 4a2:	e0 ec       	ldi	r30, 0xC0	; 192
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	90 81       	ld	r25, Z
 4a8:	95 ff       	sbrs	r25, 5
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <uart_putchar+0xe>

			/* Put data into buffer, sends the data */
			UDR0 = byte;
 4ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 4b0:	08 95       	ret
		case(CH_2):
			/* wait for empty transmit buffer */
			while (!( UCSR2A & (1 << UDRE2)));
 4b2:	e0 ed       	ldi	r30, 0xD0	; 208
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	90 81       	ld	r25, Z
 4b8:	95 ff       	sbrs	r25, 5
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <uart_putchar+0x1e>

			/* Put data into buffer, sends the data */
			UDR2 = byte;
 4bc:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 4c0:	08 95       	ret

000004c2 <uart_get_byte>:
 *
 * @return
 */
uint8_t uart_get_byte(int index, UART_CHANNEL cs)
{
	switch(cs){
 4c2:	66 23       	and	r22, r22
 4c4:	19 f0       	breq	.+6      	; 0x4cc <uart_get_byte+0xa>
 4c6:	61 30       	cpi	r22, 0x01	; 1
 4c8:	49 f0       	breq	.+18     	; 0x4dc <uart_get_byte+0x1a>
 4ca:	10 c0       	rjmp	.+32     	; 0x4ec <uart_get_byte+0x2a>
		case(CH_1):
		if (index < UART_BUFFER_SIZE)
 4cc:	80 32       	cpi	r24, 0x20	; 32
 4ce:	91 05       	cpc	r25, r1
 4d0:	7c f4       	brge	.+30     	; 0x4f0 <uart_get_byte+0x2e>
		{
			return uart_buffer_1[index];
 4d2:	fc 01       	movw	r30, r24
 4d4:	e8 5c       	subi	r30, 0xC8	; 200
 4d6:	fd 4f       	sbci	r31, 0xFD	; 253
 4d8:	80 81       	ld	r24, Z
 4da:	08 95       	ret
		}
		break;
		case(CH_2):
		if(index < UART_BUFFER_SIZE)
 4dc:	80 32       	cpi	r24, 0x20	; 32
 4de:	91 05       	cpc	r25, r1
 4e0:	4c f4       	brge	.+18     	; 0x4f4 <uart_get_byte+0x32>
		{
			return uart_buffer_2[index];
 4e2:	fc 01       	movw	r30, r24
 4e4:	e9 5e       	subi	r30, 0xE9	; 233
 4e6:	fd 4f       	sbci	r31, 0xFD	; 253
 4e8:	80 81       	ld	r24, Z
 4ea:	08 95       	ret
		}
		break;
	}
	
    return 0;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
 4f4:	80 e0       	ldi	r24, 0x00	; 0
}
 4f6:	08 95       	ret

000004f8 <uart_bytes_received>:
 *
 * @return number of bytes received on UART
 */
uint8_t uart_bytes_received(UART_CHANNEL cs)
{
	switch(cs){
 4f8:	88 23       	and	r24, r24
 4fa:	19 f0       	breq	.+6      	; 0x502 <uart_bytes_received+0xa>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	21 f0       	breq	.+8      	; 0x508 <uart_bytes_received+0x10>
 500:	06 c0       	rjmp	.+12     	; 0x50e <uart_bytes_received+0x16>
		case(CH_1):
		return uart_buffer_index_1;
 502:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <uart_buffer_index_1>
 506:	08 95       	ret
		break;
		case(CH_2):
		return uart_buffer_index_2;
 508:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <uart_buffer_index_2>
 50c:	08 95       	ret
		break;
	}
	return 0;
 50e:	80 e0       	ldi	r24, 0x00	; 0
}
 510:	08 95       	ret

00000512 <uart_reset_receive>:
 * Prepares UART to receive another payload
 *
 */
void uart_reset_receive(UART_CHANNEL cs)
{
	switch(cs){
 512:	88 23       	and	r24, r24
 514:	19 f0       	breq	.+6      	; 0x51c <uart_reset_receive+0xa>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	21 f0       	breq	.+8      	; 0x522 <uart_reset_receive+0x10>
 51a:	08 95       	ret
		case(CH_1):
		uart_buffer_index_1 = 0;
 51c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <uart_buffer_index_1>
		break;
 520:	08 95       	ret
		case(CH_2):
		uart_buffer_index_2 = 0;
 522:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <uart_buffer_index_2>
 526:	08 95       	ret

00000528 <__vector_25>:

/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	0b b6       	in	r0, 0x3b	; 59
 534:	0f 92       	push	r0
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
 53e:	e0 ec       	ldi	r30, 0xC0	; 192
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	88 23       	and	r24, r24
 546:	ec f7       	brge	.-6      	; 0x542 <__vector_25+0x1a>
    uart_buffer_1[uart_buffer_index_1] = UDR0;
 548:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <uart_buffer_index_1>
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 552:	e8 5c       	subi	r30, 0xC8	; 200
 554:	fd 4f       	sbci	r31, 0xFD	; 253
 556:	80 83       	st	Z, r24
    uart_buffer_index_1 = (uart_buffer_index_1 + 1) % UART_BUFFER_SIZE;
 558:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <uart_buffer_index_1>
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	8f 71       	andi	r24, 0x1F	; 31
 562:	90 78       	andi	r25, 0x80	; 128
 564:	99 23       	and	r25, r25
 566:	24 f4       	brge	.+8      	; 0x570 <__vector_25+0x48>
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	80 6e       	ori	r24, 0xE0	; 224
 56c:	9f 6f       	ori	r25, 0xFF	; 255
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <uart_buffer_index_1>
}
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	0f 90       	pop	r0
 57e:	0b be       	out	0x3b, r0	; 59
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__vector_51>:

/**
 * UART receive byte ISR
 */
ISR(USART2_RX_vect)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	0b b6       	in	r0, 0x3b	; 59
 596:	0f 92       	push	r0
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	while(!(UCSR2A & (1<<RXC2)));
 5a0:	e0 ed       	ldi	r30, 0xD0	; 208
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	88 23       	and	r24, r24
 5a8:	ec f7       	brge	.-6      	; 0x5a4 <__vector_51+0x1a>
    uart_buffer_2[uart_buffer_index_2] = UDR2;
 5aa:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <uart_buffer_index_2>
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 5b4:	e9 5e       	subi	r30, 0xE9	; 233
 5b6:	fd 4f       	sbci	r31, 0xFD	; 253
 5b8:	80 83       	st	Z, r24
    uart_buffer_index_2 = (uart_buffer_index_2 + 1) % UART_BUFFER_SIZE;
 5ba:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <uart_buffer_index_2>
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	8f 71       	andi	r24, 0x1F	; 31
 5c4:	90 78       	andi	r25, 0x80	; 128
 5c6:	99 23       	and	r25, r25
 5c8:	24 f4       	brge	.+8      	; 0x5d2 <__vector_51+0x48>
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	80 6e       	ori	r24, 0xE0	; 224
 5ce:	9f 6f       	ori	r25, 0xFF	; 255
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <uart_buffer_index_2>
}
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	0f 90       	pop	r0
 5e0:	0b be       	out	0x3b, r0	; 59
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <__udivmodsi4>:
 5ec:	a1 e2       	ldi	r26, 0x21	; 33
 5ee:	1a 2e       	mov	r1, r26
 5f0:	aa 1b       	sub	r26, r26
 5f2:	bb 1b       	sub	r27, r27
 5f4:	fd 01       	movw	r30, r26
 5f6:	0d c0       	rjmp	.+26     	; 0x612 <__udivmodsi4_ep>

000005f8 <__udivmodsi4_loop>:
 5f8:	aa 1f       	adc	r26, r26
 5fa:	bb 1f       	adc	r27, r27
 5fc:	ee 1f       	adc	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	a2 17       	cp	r26, r18
 602:	b3 07       	cpc	r27, r19
 604:	e4 07       	cpc	r30, r20
 606:	f5 07       	cpc	r31, r21
 608:	20 f0       	brcs	.+8      	; 0x612 <__udivmodsi4_ep>
 60a:	a2 1b       	sub	r26, r18
 60c:	b3 0b       	sbc	r27, r19
 60e:	e4 0b       	sbc	r30, r20
 610:	f5 0b       	sbc	r31, r21

00000612 <__udivmodsi4_ep>:
 612:	66 1f       	adc	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	1a 94       	dec	r1
 61c:	69 f7       	brne	.-38     	; 0x5f8 <__udivmodsi4_loop>
 61e:	60 95       	com	r22
 620:	70 95       	com	r23
 622:	80 95       	com	r24
 624:	90 95       	com	r25
 626:	9b 01       	movw	r18, r22
 628:	ac 01       	movw	r20, r24
 62a:	bd 01       	movw	r22, r26
 62c:	cf 01       	movw	r24, r30
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
